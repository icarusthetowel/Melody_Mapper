
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Check for role on the user's document in Firestore.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // A user can create their own document
      allow create: if request.auth.uid == userId;
      // An admin can read any user doc. A user can read their own.
      allow read, list: if request.auth.uid == userId || isAdmin();
      // No one can update/delete user docs for now
      allow update, delete: if false;
    }

    match /students/{studentId} {
      // Check if the currently authenticated user is the teacher assigned to the student document.
      // This is more efficient than get() as email is in the auth token.
      function isAssignedTeacher() {
        return resource.data.teacherId == request.auth.token.email;
      }
      
      // Only an Admin, or the assigned Teacher can read or update a student's record.
      allow read, update: if isAdmin() || isAssignedTeacher();
      
      // Any authenticated user can list or create students.
      // The application logic handles filtering lists and setting the correct teacherId on create.
      allow list, create: if request.auth != null;
      
      // Only an Admin can delete a student.
      allow delete: if isAdmin();
    }
    
    match /lessons/{lessonId} {
      allow read, list: if request.auth != null; 
      allow create, update, delete: if isAdmin();
    }
  }
}
